<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:/nl.properties" />

	<!-- 使用Annotation自动注册Bean，只扫描@Controller -->
	<context:component-scan base-package="com.hengtiansoft.nl"
		use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 自动扫描(自动注入)Service -->
	<context:component-scan base-package="com.hengtiansoft.nl.service,com.hengtiansoft.nl.test" />

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven 
		content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为true -->
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
				<property name="objectMapper">
					<bean class="com.hengtiansoft.nl.common.mapper.JsonMapper"></bean>
				</property>
			</bean>
			<!-- 使用XML格式输出数据 -->
			<!-- <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"> 
				<constructor-arg> <bean class="org.springframework.oxm.xstream.XStreamMarshaller"> 
				<property name="streamDriver"> <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/> 
				</property> <property name="annotatedClasses"> <list> <value>com.hengtiansoft.dj.common.persistence.BaseEntity</value> 
				</list> </property> </bean> </constructor-arg> <property name="supportedMediaTypes" 
				value="application/xml"></property> </bean> -->
		</mvc:message-converters>

		<!-- <mvc:argument-resolvers> <bean class="com.hengtiansoft.dj.common.web.SecureModelAttributeMethodArgumentResolver"> 
			<constructor-arg value="false"/> </bean> for json data request resolver <bean 
			class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> 
			线程安全的访问session <property name="synchronizeOnSession" value="true"/> <property 
			name="customArgumentResolvers"> <list> <bean class="com.hengtiansoft.dj.common.utils.resolver.RequestJsonParamMethodArgumentResolver"/> 
			<bean class="com.hengtiansoft.dj.common.utils.resolver.FormModelMethodArgumentResolver"/> 
			</list> </property> </bean> </mvc:argument-resolvers> -->
	</mvc:annotation-driven>
	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorPathExtension" value="true" />
	</bean>
	<!-- 视图文件解析配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}" />
		<property name="suffix" value="${web.view.suffix}" />
	</bean>
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/**"
		view-name="redirect:${web.view.index}" />

	<!-- 拦截器配置 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.hengtiansoft.nl.interceptor.SecurityInterceptor">
				<property name="excludePaths">
					<list>
						<value>login</value>
						<value>logout</value>
						<!-- <value>getStudentList</value> -->
						<value>register</value>
						<value>error</value>
						<value>test</value>
						<value>errorPermission</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- <mvc:interceptors>		
			<bean class="com.hengtiansoft.nl.interceptor.SecurityInterceptor" />		
	</mvc:interceptors> -->
	
	<!-- 通过id和name获取bean -->
	<bean id="getBeanById" name="getBeanByAlias" class="com.hengtiansoft.nl.test.GetBeanByIdOrName"/> 
	<!--<bean  class="com.hengtiansoft.nl.test.GetBeanByIdOrName"/>-->
	
	
	<!-- Set 注入 -->
	<bean name="springSetInject" class="com.hengtiansoft.nl.test.action.SpringSetInject">
		<property name="springDao" ref="springDao"></property>
		
	</bean>
	
	<!-- 构造器注入 -->
	<bean name="springConstractorInject" class="com.hengtiansoft.nl.test.action.SpringConstractorInject">
	<constructor-arg ref="springDao"></constructor-arg>
	<constructor-arg ref="user"></constructor-arg>
	</bean>
	
	<bean id="springDao" class="com.hengtiansoft.nl.test.dao.SpringDao"/>
	<bean id="user" class="com.hengtiansoft.nl.test.dao.User"/>
</beans>